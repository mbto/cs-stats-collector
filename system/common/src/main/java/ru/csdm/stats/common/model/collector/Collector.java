/*
 * This file is generated by jOOQ.
 */
package ru.csdm.stats.common.model.collector;


import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;
import ru.csdm.stats.common.model.DefaultCatalog;
import ru.csdm.stats.common.model.collector.tables.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Collector extends SchemaImpl {

    private static final long serialVersionUID = -2016440261;

    /**
     * The reference instance of <code>collector</code>
     */
    public static final Collector COLLECTOR = new Collector();

    /**
     * Additional JDBC driver connection properties https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html
     */
    public final DriverProperty DRIVER_PROPERTY = ru.csdm.stats.common.model.collector.tables.DriverProperty.DRIVER_PROPERTY;

    /**
     * The table <code>collector.instance</code>.
     */
    public final Instance INSTANCE = ru.csdm.stats.common.model.collector.tables.Instance.INSTANCE;

    /**
     * The table <code>collector.known_server</code>.
     */
    public final KnownServer KNOWN_SERVER = ru.csdm.stats.common.model.collector.tables.KnownServer.KNOWN_SERVER;

    /**
     * Projects managers
     */
    public final Manager MANAGER = ru.csdm.stats.common.model.collector.tables.Manager.MANAGER;

    /**
     * The table <code>collector.project</code>.
     */
    public final Project PROJECT = ru.csdm.stats.common.model.collector.tables.Project.PROJECT;

    /**
     * No further instances allowed
     */
    private Collector() {
        super("collector", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            DriverProperty.DRIVER_PROPERTY,
            Instance.INSTANCE,
            KnownServer.KNOWN_SERVER,
            Manager.MANAGER,
            Project.PROJECT);
    }
}
