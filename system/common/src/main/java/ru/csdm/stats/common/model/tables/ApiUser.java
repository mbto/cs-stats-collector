/*
 * This file is generated by jOOQ.
 */
package ru.csdm.stats.common.model.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import ru.csdm.stats.common.model.Csstats;
import ru.csdm.stats.common.model.Indexes;
import ru.csdm.stats.common.model.Keys;
import ru.csdm.stats.common.model.tables.records.ApiUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * Who to share API access to endpoints /stats/ *
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiUser extends TableImpl<ApiUserRecord> {

    private static final long serialVersionUID = 899872775;

    /**
     * The reference instance of <code>csstats.api_user</code>
     */
    public static final ApiUser API_USER = new ApiUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiUserRecord> getRecordType() {
        return ApiUserRecord.class;
    }

    /**
     * The column <code>csstats.api_user.id</code>.
     */
    public final TableField<ApiUserRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>csstats.api_user.active</code>.
     */
    public final TableField<ApiUserRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>csstats.api_user.username</code>.
     */
    public final TableField<ApiUserRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>csstats.api_user.password</code>. https://www.browserling.com/tools/bcrypt
     */
    public final TableField<ApiUserRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "https://www.browserling.com/tools/bcrypt");

    /**
     * The column <code>csstats.api_user.manage</code>. 1-can invoke 'managers' endpoints (/stats/updateSettings, /stats/flush, /stats/, etc...);0-can't invoke 'managers' endpoints
     */
    public final TableField<ApiUserRecord, Boolean> MANAGE = createField("manage", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "1-can invoke 'managers' endpoints (/stats/updateSettings, /stats/flush, /stats/, etc...);0-can't invoke 'managers' endpoints");

    /**
     * The column <code>csstats.api_user.view</code>. 1-can invoke 'views' endpoints (/stats/player, etc...);0-can't invoke 'views' endpoints
     */
    public final TableField<ApiUserRecord, Boolean> VIEW = createField("view", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "1-can invoke 'views' endpoints (/stats/player, etc...);0-can't invoke 'views' endpoints");

    /**
     * The column <code>csstats.api_user.reg_datetime</code>.
     */
    public final TableField<ApiUserRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>csstats.api_user</code> table reference
     */
    public ApiUser() {
        this(DSL.name("api_user"), null);
    }

    /**
     * Create an aliased <code>csstats.api_user</code> table reference
     */
    public ApiUser(String alias) {
        this(DSL.name(alias), API_USER);
    }

    /**
     * Create an aliased <code>csstats.api_user</code> table reference
     */
    public ApiUser(Name alias) {
        this(alias, API_USER);
    }

    private ApiUser(Name alias, Table<ApiUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiUser(Name alias, Table<ApiUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Who to share API access to endpoints /stats/*"));
    }

    public <O extends Record> ApiUser(Table<O> child, ForeignKey<O, ApiUserRecord> key) {
        super(child, key, API_USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Csstats.CSSTATS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.API_USER_ID_UNIQUE, Indexes.API_USER_PRIMARY, Indexes.API_USER_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ApiUserRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_API_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApiUserRecord> getPrimaryKey() {
        return Keys.KEY_API_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApiUserRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiUserRecord>>asList(Keys.KEY_API_USER_PRIMARY, Keys.KEY_API_USER_ID_UNIQUE, Keys.KEY_API_USER_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApiUser as(String alias) {
        return new ApiUser(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ApiUser as(Name alias) {
        return new ApiUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiUser rename(String name) {
        return new ApiUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiUser rename(Name name) {
        return new ApiUser(name, null);
    }
}
