/*
 * This file is generated by jOOQ.
 */
package ru.csdm.stats.common.model.collector.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import ru.csdm.stats.common.model.collector.Collector;
import ru.csdm.stats.common.model.collector.Indexes;
import ru.csdm.stats.common.model.collector.Keys;
import ru.csdm.stats.common.model.collector.tables.records.ManagerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * Projects managers
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Manager extends TableImpl<ManagerRecord> {

    private static final long serialVersionUID = -1496408749;

    /**
     * The reference instance of <code>collector.manager</code>
     */
    public static final Manager MANAGER = new Manager();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ManagerRecord> getRecordType() {
        return ManagerRecord.class;
    }

    /**
     * The column <code>collector.manager.id</code>.
     */
    public final TableField<ManagerRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>collector.manager.project_id</code>.
     */
    public final TableField<ManagerRecord, UInteger> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>collector.manager.username</code>.
     */
    public final TableField<ManagerRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR(31).nullable(false), this, "");

    /**
     * The column <code>collector.manager.password</code>. https://www.browserling.com/tools/bcrypt
     */
    public final TableField<ManagerRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.CHAR(60).nullable(false), this, "https://www.browserling.com/tools/bcrypt");

    /**
     * The column <code>collector.manager.active</code>.
     */
    public final TableField<ManagerRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>collector.manager.manage_hosting</code>. 1-can manage all projects in hosting, 0-can manage only project by `project_id`
     */
    public final TableField<ManagerRecord, Boolean> MANAGE_HOSTING = createField("manage_hosting", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "1-can manage all projects in hosting, 0-can manage only project by `project_id`");

    /**
     * The column <code>collector.manager.reg_datetime</code>.
     */
    public final TableField<ManagerRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>collector.manager</code> table reference
     */
    public Manager() {
        this(DSL.name("manager"), null);
    }

    /**
     * Create an aliased <code>collector.manager</code> table reference
     */
    public Manager(String alias) {
        this(DSL.name(alias), MANAGER);
    }

    /**
     * Create an aliased <code>collector.manager</code> table reference
     */
    public Manager(Name alias) {
        this(alias, MANAGER);
    }

    private Manager(Name alias, Table<ManagerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Manager(Name alias, Table<ManagerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Projects managers"));
    }

    public <O extends Record> Manager(Table<O> child, ForeignKey<O, ManagerRecord> key) {
        super(child, key, MANAGER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Collector.COLLECTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MANAGER_ID_UNIQUE, Indexes.MANAGER_MANAGER_PROJECT_ID_IDX, Indexes.MANAGER_PRIMARY, Indexes.MANAGER_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ManagerRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_MANAGER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ManagerRecord> getPrimaryKey() {
        return Keys.KEY_MANAGER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ManagerRecord>> getKeys() {
        return Arrays.<UniqueKey<ManagerRecord>>asList(Keys.KEY_MANAGER_PRIMARY, Keys.KEY_MANAGER_ID_UNIQUE, Keys.KEY_MANAGER_USERNAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ManagerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ManagerRecord, ?>>asList(Keys.MANAGER_PROJECT_ID_FK);
    }

    public Project project() {
        return new Project(this, Keys.MANAGER_PROJECT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Manager as(String alias) {
        return new Manager(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Manager as(Name alias) {
        return new Manager(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(String name) {
        return new Manager(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Manager rename(Name name) {
        return new Manager(name, null);
    }
}
