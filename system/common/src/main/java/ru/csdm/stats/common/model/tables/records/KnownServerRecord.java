/*
 * This file is generated by jOOQ.
 */
package ru.csdm.stats.common.model.tables.records;


import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;

import ru.csdm.stats.common.model.tables.KnownServer;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KnownServerRecord extends UpdatableRecordImpl<KnownServerRecord> implements Record6<UInteger, String, Boolean, Boolean, Boolean, Boolean> {

    private static final long serialVersionUID = -1027508625;

    /**
     * Setter for <code>csstats.known_server.id</code>.
     */
    public void setId(UInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>csstats.known_server.id</code>.
     */
    public UInteger getId() {
        return (UInteger) get(0);
    }

    /**
     * Setter for <code>csstats.known_server.ipport</code>. ip:port of the server from which the logs will be expected
     */
    public void setIpport(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>csstats.known_server.ipport</code>. ip:port of the server from which the logs will be expected
     */
    @NotNull
    @Size(max = 21)
    public String getIpport() {
        return (String) get(1);
    }

    /**
     * Setter for <code>csstats.known_server.active</code>. Are ip:port allowed?: 1-allowed; 0-not allowed (logs/stats from this ip:port will be ignored)
     */
    public void setActive(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>csstats.known_server.active</code>. Are ip:port allowed?: 1-allowed; 0-not allowed (logs/stats from this ip:port will be ignored)
     */
    public Boolean getActive() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>csstats.known_server.ffa</code>. game server is FREE-FOR-ALL mode (Example: CS-DeathMatch): 1-true; 0-false
     */
    public void setFfa(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>csstats.known_server.ffa</code>. game server is FREE-FOR-ALL mode (Example: CS-DeathMatch): 1-true; 0-false
     */
    public Boolean getFfa() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>csstats.known_server.ignore_bots</code>. 1-ignore statistics, when killer or victim is BOT; 0-don't ignore (include all player's)
     */
    public void setIgnoreBots(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>csstats.known_server.ignore_bots</code>. 1-ignore statistics, when killer or victim is BOT; 0-don't ignore (include all player's)
     */
    public Boolean getIgnoreBots() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>csstats.known_server.start_session_on_action</code>. 1-start player's session on event "... killed ... with ..." (not for kreedz servers); 0-start player's session on event "... connected, address ..." or "... entered the game"
     */
    public void setStartSessionOnAction(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>csstats.known_server.start_session_on_action</code>. 1-start player's session on event "... killed ... with ..." (not for kreedz servers); 0-start player's session on event "... connected, address ..." or "... entered the game"
     */
    public Boolean getStartSessionOnAction() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<UInteger, String, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row6<UInteger, String, Boolean, Boolean, Boolean, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UInteger> field1() {
        return KnownServer.KNOWN_SERVER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return KnownServer.KNOWN_SERVER.IPPORT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field3() {
        return KnownServer.KNOWN_SERVER.ACTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field4() {
        return KnownServer.KNOWN_SERVER.FFA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field5() {
        return KnownServer.KNOWN_SERVER.IGNORE_BOTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field6() {
        return KnownServer.KNOWN_SERVER.START_SESSION_ON_ACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getIpport();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component3() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component4() {
        return getFfa();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component5() {
        return getIgnoreBots();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component6() {
        return getStartSessionOnAction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UInteger value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getIpport();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value3() {
        return getActive();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value4() {
        return getFfa();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value5() {
        return getIgnoreBots();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value6() {
        return getStartSessionOnAction();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value1(UInteger value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value2(String value) {
        setIpport(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value3(Boolean value) {
        setActive(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value4(Boolean value) {
        setFfa(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value5(Boolean value) {
        setIgnoreBots(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord value6(Boolean value) {
        setStartSessionOnAction(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KnownServerRecord values(UInteger value1, String value2, Boolean value3, Boolean value4, Boolean value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KnownServerRecord
     */
    public KnownServerRecord() {
        super(KnownServer.KNOWN_SERVER);
    }

    /**
     * Create a detached, initialised KnownServerRecord
     */
    public KnownServerRecord(UInteger id, String ipport, Boolean active, Boolean ffa, Boolean ignoreBots, Boolean startSessionOnAction) {
        super(KnownServer.KNOWN_SERVER);

        set(0, id);
        set(1, ipport);
        set(2, active);
        set(3, ffa);
        set(4, ignoreBots);
        set(5, startSessionOnAction);
    }
}
