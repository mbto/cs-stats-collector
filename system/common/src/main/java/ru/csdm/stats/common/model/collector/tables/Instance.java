/*
 * This file is generated by jOOQ.
 */
package ru.csdm.stats.common.model.collector.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import ru.csdm.stats.common.model.collector.Collector;
import ru.csdm.stats.common.model.collector.Indexes;
import ru.csdm.stats.common.model.collector.Keys;
import ru.csdm.stats.common.model.collector.tables.records.InstanceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Instance extends TableImpl<InstanceRecord> {

    private static final long serialVersionUID = -271057159;

    /**
     * The reference instance of <code>collector.instance</code>
     */
    public static final Instance INSTANCE = new Instance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstanceRecord> getRecordType() {
        return InstanceRecord.class;
    }

    /**
     * The column <code>collector.instance.id</code>.
     */
    public final TableField<InstanceRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>collector.instance.name</code>. cs-stats-collector instance name from application.properties
     */
    public final TableField<InstanceRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "cs-stats-collector instance name from application.properties");

    /**
     * The column <code>collector.instance.description</code>.
     */
    public final TableField<InstanceRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>collector.instance.reg_datetime</code>.
     */
    public final TableField<InstanceRecord, LocalDateTime> REG_DATETIME = createField("reg_datetime", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>collector.instance</code> table reference
     */
    public Instance() {
        this(DSL.name("instance"), null);
    }

    /**
     * Create an aliased <code>collector.instance</code> table reference
     */
    public Instance(String alias) {
        this(DSL.name(alias), INSTANCE);
    }

    /**
     * Create an aliased <code>collector.instance</code> table reference
     */
    public Instance(Name alias) {
        this(alias, INSTANCE);
    }

    private Instance(Name alias, Table<InstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Instance(Name alias, Table<InstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Instance(Table<O> child, ForeignKey<O, InstanceRecord> key) {
        super(child, key, INSTANCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Collector.COLLECTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INSTANCE_ID_UNIQUE, Indexes.INSTANCE_NAME_UNIQUE, Indexes.INSTANCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InstanceRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_INSTANCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InstanceRecord> getPrimaryKey() {
        return Keys.KEY_INSTANCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InstanceRecord>> getKeys() {
        return Arrays.<UniqueKey<InstanceRecord>>asList(Keys.KEY_INSTANCE_PRIMARY, Keys.KEY_INSTANCE_ID_UNIQUE, Keys.KEY_INSTANCE_NAME_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instance as(String alias) {
        return new Instance(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instance as(Name alias) {
        return new Instance(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Instance rename(String name) {
        return new Instance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Instance rename(Name name) {
        return new Instance(name, null);
    }
}
